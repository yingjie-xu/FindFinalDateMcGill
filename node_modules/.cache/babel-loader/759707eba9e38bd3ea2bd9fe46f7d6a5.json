{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nvar ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\n\nvar ClearableLabeledInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ClearableLabeledInput, _React$Component);\n\n  function ClearableLabeledInput() {\n    _classCallCheck(this, ClearableLabeledInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClearableLabeledInput).apply(this, arguments));\n  }\n\n  _createClass(ClearableLabeledInput, [{\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props = this.props,\n          allowClear = _this$props.allowClear,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          inputType = _this$props.inputType,\n          handleReset = _this$props.handleReset;\n\n      if (!allowClear || disabled || value === undefined || value === null || value === '') {\n        return null;\n      }\n\n      var className = inputType === ClearableInputType[0] ? \"\".concat(prefixCls, \"-textarea-clear-icon\") : \"\".concat(prefixCls, \"-clear-icon\");\n      return React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        onClick: handleReset,\n        className: className,\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderSuffix\",\n    value: function renderSuffix(prefixCls) {\n      var _this$props2 = this.props,\n          suffix = _this$props2.suffix,\n          allowClear = _this$props2.allowClear;\n\n      if (suffix || allowClear) {\n        return React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-suffix\")\n        }, this.renderClearIcon(prefixCls), suffix);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLabeledIcon\",\n    value: function renderLabeledIcon(prefixCls, element) {\n      var _classNames;\n\n      var props = this.props;\n      var suffix = this.renderSuffix(prefixCls);\n\n      if (!hasPrefixSuffix(props)) {\n        return React.cloneElement(element, {\n          value: props.value\n        });\n      }\n\n      var prefix = props.prefix ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-prefix\")\n      }, props.prefix) : null;\n      var affixWrapperCls = classNames(props.className, \"\".concat(prefixCls, \"-affix-wrapper\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), props.size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), props.size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-input-with-clear-btn\"), props.suffix && props.allowClear && this.props.value), _classNames));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: props.style\n      }, prefix, React.cloneElement(element, {\n        style: null,\n        value: props.value,\n        className: getInputClassName(prefixCls, props.size, props.disabled)\n      }), suffix);\n    }\n  }, {\n    key: \"renderInputWithLabel\",\n    value: function renderInputWithLabel(prefixCls, labeledElement) {\n      var _classNames3;\n\n      var _this$props3 = this.props,\n          addonBefore = _this$props3.addonBefore,\n          addonAfter = _this$props3.addonAfter,\n          style = _this$props3.style,\n          size = _this$props3.size,\n          className = _this$props3.className; // Not wrap when there is not addons\n\n      if (!addonBefore && !addonAfter) {\n        return labeledElement;\n      }\n\n      var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n      var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n      var addonBeforeNode = addonBefore ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonBefore) : null;\n      var addonAfterNode = addonAfter ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonAfter) : null;\n      var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));\n      var mergedGroupClassName = classNames(className, \"\".concat(prefixCls, \"-group-wrapper\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block\n      // and put style prop in wrapper\n\n      return React.createElement(\"span\", {\n        className: mergedGroupClassName,\n        style: style\n      }, React.createElement(\"span\", {\n        className: mergedWrapperClassName\n      }, addonBeforeNode, React.cloneElement(labeledElement, {\n        style: null\n      }), addonAfterNode));\n    }\n  }, {\n    key: \"renderTextAreaWithClearIcon\",\n    value: function renderTextAreaWithClearIcon(prefixCls, element) {\n      var _this$props4 = this.props,\n          value = _this$props4.value,\n          allowClear = _this$props4.allowClear,\n          className = _this$props4.className,\n          style = _this$props4.style;\n\n      if (!allowClear) {\n        return React.cloneElement(element, {\n          value: value\n        });\n      }\n\n      var affixWrapperCls = classNames(className, \"\".concat(prefixCls, \"-affix-wrapper\"), \"\".concat(prefixCls, \"-affix-wrapper-textarea-with-clear-btn\"));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: style\n      }, React.cloneElement(element, {\n        style: null,\n        value: value\n      }), this.renderClearIcon(prefixCls));\n    }\n  }, {\n    key: \"renderClearableLabeledInput\",\n    value: function renderClearableLabeledInput() {\n      var _this$props5 = this.props,\n          prefixCls = _this$props5.prefixCls,\n          inputType = _this$props5.inputType,\n          element = _this$props5.element;\n\n      if (inputType === ClearableInputType[0]) {\n        return this.renderTextAreaWithClearIcon(prefixCls, element);\n      }\n\n      return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.renderClearableLabeledInput();\n    }\n  }]);\n\n  return ClearableLabeledInput;\n}(React.Component);\n\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;","map":null,"metadata":{},"sourceType":"module"}