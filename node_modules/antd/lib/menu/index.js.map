{"version":3,"sources":["menu/index.jsx"],"names":["InternalMenu","props","handleMouseEnter","e","restoreModeVerticalFromInline","onMouseEnter","handleTransitionEnd","widthCollapsed","propertyName","target","currentTarget","className","classNameValue","Object","prototype","toString","call","animVal","iconScaled","indexOf","handleClick","handleOpenChange","onClick","openKeys","setOpenKeys","onOpenChange","renderMenu","getPopupContainer","getPrefixCls","customizePrefixCls","prefixCls","theme","collapsedWidth","passProps","menuMode","getRealMenuMode","menuOpenMotion","getOpenMotionProps","menuClassName","getInlineCollapsed","menuProps","state","mode","hideMenu","siderCollapsed","undefined","defaultOpenKeys","switchingModeFromInline","inlineOpenKeys","prevProps","raf","cancel","mountRafId","setState","inlineCollapsed","openTransitionName","openAnimation","motion","motionName","collapseMotion","antdMenuTheme","nextProps","prevState","newState","React","Component","defaultProps","focusable","Menu","context","Divider","Item","SubMenu","ItemGroup"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { SiderContext } from '../layout/Sider';\nimport raf from '../_util/raf';\nimport collapseMotion from '../_util/motion';\nimport MenuContext from './MenuContext';\nclass InternalMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        // Restore vertical mode when menu is collapsed responsively when mounted\n        // https://github.com/ant-design/ant-design/issues/13104\n        // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n        this.handleMouseEnter = (e) => {\n            this.restoreModeVerticalFromInline();\n            const { onMouseEnter } = this.props;\n            if (onMouseEnter) {\n                onMouseEnter(e);\n            }\n        };\n        this.handleTransitionEnd = (e) => {\n            // when inlineCollapsed menu width animation finished\n            // https://github.com/ant-design/ant-design/issues/12864\n            const widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget;\n            // Fix SVGElement e.target.className.indexOf is not a function\n            // https://github.com/ant-design/ant-design/issues/15699\n            const { className } = e.target;\n            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n            const classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]'\n                ? className.animVal\n                : className;\n            // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n            // https://github.com/ant-design/ant-design-pro/issues/2783\n            const iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n            if (widthCollapsed || iconScaled) {\n                this.restoreModeVerticalFromInline();\n            }\n        };\n        this.handleClick = (e) => {\n            this.handleOpenChange([]);\n            const { onClick } = this.props;\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        this.handleOpenChange = (openKeys) => {\n            this.setOpenKeys(openKeys);\n            const { onOpenChange } = this.props;\n            if (onOpenChange) {\n                onOpenChange(openKeys);\n            }\n        };\n        this.renderMenu = ({ getPopupContainer, getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, className, theme, collapsedWidth } = this.props;\n            const passProps = omit(this.props, ['collapsedWidth', 'siderCollapsed']);\n            const menuMode = this.getRealMenuMode();\n            const menuOpenMotion = this.getOpenMotionProps(menuMode);\n            const prefixCls = getPrefixCls('menu', customizePrefixCls);\n            const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n                [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n            });\n            const menuProps = Object.assign({ openKeys: this.state.openKeys, onOpenChange: this.handleOpenChange, className: menuClassName, mode: menuMode }, menuOpenMotion);\n            if (menuMode !== 'inline') {\n                // closing vertical popup submenu after click it\n                menuProps.onClick = this.handleClick;\n            }\n            // https://github.com/ant-design/ant-design/issues/8587\n            const hideMenu = this.getInlineCollapsed() &&\n                (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');\n            if (hideMenu) {\n                menuProps.openKeys = [];\n            }\n            return (<RcMenu getPopupContainer={getPopupContainer} {...passProps} {...menuProps} prefixCls={prefixCls} onTransitionEnd={this.handleTransitionEnd} onMouseEnter={this.handleMouseEnter}/>);\n        };\n        warning(!('onOpen' in props || 'onClose' in props), 'Menu', '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' +\n            'see: https://u.ant.design/menu-on-open-change.');\n        warning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n        warning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');\n        let openKeys;\n        if ('openKeys' in props) {\n            openKeys = props.openKeys;\n        }\n        else if ('defaultOpenKeys' in props) {\n            openKeys = props.defaultOpenKeys;\n        }\n        this.state = {\n            openKeys: openKeys || [],\n            switchingModeFromInline: false,\n            inlineOpenKeys: [],\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n            newState.switchingModeFromInline = true;\n        }\n        if ('openKeys' in nextProps) {\n            newState.openKeys = nextProps.openKeys;\n        }\n        else {\n            // [Legacy] Old code will return after `openKeys` changed.\n            // Not sure the reason, we should keep this logic still.\n            if ((nextProps.inlineCollapsed && !prevProps.inlineCollapsed) ||\n                (nextProps.siderCollapsed && !prevProps.siderCollapsed)) {\n                newState.switchingModeFromInline = true;\n                newState.inlineOpenKeys = prevState.openKeys;\n                newState.openKeys = [];\n            }\n            if ((!nextProps.inlineCollapsed && prevProps.inlineCollapsed) ||\n                (!nextProps.siderCollapsed && prevProps.siderCollapsed)) {\n                newState.openKeys = prevState.inlineOpenKeys;\n                newState.inlineOpenKeys = [];\n            }\n        }\n        return newState;\n    }\n    componentWillUnmount() {\n        raf.cancel(this.mountRafId);\n    }\n    setOpenKeys(openKeys) {\n        if (!('openKeys' in this.props)) {\n            this.setState({ openKeys });\n        }\n    }\n    getRealMenuMode() {\n        const inlineCollapsed = this.getInlineCollapsed();\n        if (this.state.switchingModeFromInline && inlineCollapsed) {\n            return 'inline';\n        }\n        const { mode } = this.props;\n        return inlineCollapsed ? 'vertical' : mode;\n    }\n    getInlineCollapsed() {\n        const { inlineCollapsed } = this.props;\n        if (this.props.siderCollapsed !== undefined) {\n            return this.props.siderCollapsed;\n        }\n        return inlineCollapsed;\n    }\n    getOpenMotionProps(menuMode) {\n        const { openTransitionName, openAnimation, motion } = this.props;\n        // Provides by user\n        if (motion) {\n            return { motion };\n        }\n        if (openAnimation) {\n            warning(typeof openAnimation === 'string', 'Menu', '`openAnimation` do not support object. Please use `motion` instead.');\n            return { openAnimation };\n        }\n        if (openTransitionName) {\n            return { openTransitionName };\n        }\n        // Default logic\n        if (menuMode === 'horizontal') {\n            return { motion: { motionName: 'slide-up' } };\n        }\n        if (menuMode === 'inline') {\n            return { motion: collapseMotion };\n        }\n        // When mode switch from inline\n        // submenu should hide without animation\n        return {\n            motion: {\n                motionName: this.state.switchingModeFromInline ? '' : 'zoom-big',\n            },\n        };\n    }\n    restoreModeVerticalFromInline() {\n        const { switchingModeFromInline } = this.state;\n        if (switchingModeFromInline) {\n            this.setState({\n                switchingModeFromInline: false,\n            });\n        }\n    }\n    render() {\n        return (<MenuContext.Provider value={{\n            inlineCollapsed: this.getInlineCollapsed() || false,\n            antdMenuTheme: this.props.theme,\n        }}>\n        <ConfigConsumer>{this.renderMenu}</ConfigConsumer>\n      </MenuContext.Provider>);\n    }\n}\nInternalMenu.defaultProps = {\n    className: '',\n    theme: 'light',\n    focusable: false,\n};\npolyfill(InternalMenu);\n// We should keep this as ref-able\nexport default class Menu extends React.Component {\n    render() {\n        return (<SiderContext.Consumer>\n        {(context) => <InternalMenu {...this.props} {...context}/>}\n      </SiderContext.Consumer>);\n    }\n}\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\n"],"file":"index.js"}