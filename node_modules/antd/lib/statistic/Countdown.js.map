{"version":3,"sources":["statistic/Countdown.jsx"],"names":["REFRESH_INTERVAL","getTime","value","moment","valueOf","Countdown","arguments","syncTimer","props","timestamp","Date","now","startTimer","stopTimer","countdownId","window","setInterval","forceUpdate","onFinish","clearInterval","undefined","formatCountdown","config","format","valueRender","node","React","cloneElement","title","Component","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,gBAAgB,GAAG,OAAO,EAAhC;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAO,gCAAeC,MAAf,EAAuBD,KAAvB,EAA8BE,OAA9B,EAAP;AACH;;IACKC,S;;;;;AACF,uBAAc;AAAA;;AAAA;;AACV,oFAASC,SAAT;;AACA,UAAKC,SAAL,GAAiB,YAAM;AAAA,UACXL,KADW,GACD,MAAKM,KADJ,CACXN,KADW;AAEnB,UAAMO,SAAS,GAAGR,OAAO,CAACC,KAAD,CAAzB;;AACA,UAAIO,SAAS,IAAIC,IAAI,CAACC,GAAL,EAAjB,EAA6B;AACzB,cAAKC,UAAL;AACH,OAFD,MAGK;AACD,cAAKC,SAAL;AACH;AACJ,KATD;;AAUA,UAAKD,UAAL,GAAkB,YAAM;AACpB,UAAI,MAAKE,WAAT,EACI;AACJ,YAAKA,WAAL,GAAmBC,MAAM,CAACC,WAAP,CAAmB,YAAM;AACxC,cAAKC,WAAL;AACH,OAFkB,EAEhBjB,gBAFgB,CAAnB;AAGH,KAND;;AAOA,UAAKa,SAAL,GAAiB,YAAM;AAAA,wBACS,MAAKL,KADd;AAAA,UACXU,QADW,eACXA,QADW;AAAA,UACDhB,KADC,eACDA,KADC;;AAEnB,UAAI,MAAKY,WAAT,EAAsB;AAClBK,QAAAA,aAAa,CAAC,MAAKL,WAAN,CAAb;AACA,cAAKA,WAAL,GAAmBM,SAAnB;AACA,YAAMX,SAAS,GAAGR,OAAO,CAACC,KAAD,CAAzB;;AACA,YAAIgB,QAAQ,IAAIT,SAAS,GAAGC,IAAI,CAACC,GAAL,EAA5B,EAAwC;AACpCO,UAAAA,QAAQ;AACX;AACJ;AACJ,KAVD;;AAWA,UAAKG,eAAL,GAAuB,UAACnB,KAAD,EAAQoB,MAAR,EAAmB;AAAA,UAC9BC,MAD8B,GACnB,MAAKf,KADc,CAC9Be,MAD8B;AAEtC,aAAO,4BAAgBrB,KAAhB,EAAuB,SAAc,SAAc,EAAd,EAAkBoB,MAAlB,CAAd,EAAyC;AAAEC,QAAAA,MAAM,EAANA;AAAF,OAAzC,CAAvB,CAAP;AACH,KAHD,CA9BU,CAkCV;;;AACA,UAAKC,WAAL,GAAmB,UAACC,IAAD;AAAA,aAAUC,KAAK,CAACC,YAAN,CAAmBF,IAAnB,EAAyB;AAClDG,QAAAA,KAAK,EAAER;AAD2C,OAAzB,CAAV;AAAA,KAAnB;;AAnCU;AAsCb;;;;wCACmB;AAChB,WAAKb,SAAL;AACH;;;yCACoB;AACjB,WAAKA,SAAL;AACH;;;2CACsB;AACnB,WAAKM,SAAL;AACH;;;6BACQ;AACL,aAAQ,oBAAC,qBAAD;AAAW,QAAA,WAAW,EAAE,KAAKW;AAA7B,SAA8C,KAAKhB,KAAnD;AAA0D,QAAA,SAAS,EAAE,KAAKa;AAA1E,SAAR;AACH;;;;EAnDmBK,KAAK,CAACG,S;;AAqD9BxB,SAAS,CAACyB,YAAV,GAAyB;AACrBP,EAAAA,MAAM,EAAE;AADa,CAAzB;AAGA,qCAASlB,SAAT;eACeA,S","sourcesContent":["import * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n    return interopDefault(moment)(value).valueOf();\n}\nclass Countdown extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.syncTimer = () => {\n            const { value } = this.props;\n            const timestamp = getTime(value);\n            if (timestamp >= Date.now()) {\n                this.startTimer();\n            }\n            else {\n                this.stopTimer();\n            }\n        };\n        this.startTimer = () => {\n            if (this.countdownId)\n                return;\n            this.countdownId = window.setInterval(() => {\n                this.forceUpdate();\n            }, REFRESH_INTERVAL);\n        };\n        this.stopTimer = () => {\n            const { onFinish, value } = this.props;\n            if (this.countdownId) {\n                clearInterval(this.countdownId);\n                this.countdownId = undefined;\n                const timestamp = getTime(value);\n                if (onFinish && timestamp < Date.now()) {\n                    onFinish();\n                }\n            }\n        };\n        this.formatCountdown = (value, config) => {\n            const { format } = this.props;\n            return formatCountdown(value, Object.assign(Object.assign({}, config), { format }));\n        };\n        // Countdown do not need display the timestamp\n        this.valueRender = (node) => React.cloneElement(node, {\n            title: undefined,\n        });\n    }\n    componentDidMount() {\n        this.syncTimer();\n    }\n    componentDidUpdate() {\n        this.syncTimer();\n    }\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n    render() {\n        return (<Statistic valueRender={this.valueRender} {...this.props} formatter={this.formatCountdown}/>);\n    }\n}\nCountdown.defaultProps = {\n    format: 'HH:mm:ss',\n};\npolyfill(Countdown);\nexport default Countdown;\n"],"file":"Countdown.js"}