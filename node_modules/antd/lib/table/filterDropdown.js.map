{"version":3,"sources":["table/filterDropdown.jsx"],"names":["stopPropagation","e","nativeEvent","stopImmediatePropagation","FilterMenu","props","setNeverShown","column","rootNode","ReactDOM","findDOMNode","filterBelongToScrollBody","neverShown","fixed","setSelectedKeys","selectedKeys","setState","handleClearFilters","handleConfirm","setVisible","confirmFilter","onVisibleChange","visible","filterDropdown","Function","handleMenuItemClick","info","state","keyPath","length","keyPathOfSelectedItem","indexOf","key","renderFilterIcon","locale","prefixCls","filtered","filterIcon","dropdownIconClass","getDropdownVisible","filterTitle","React","isValidElement","cloneElement","title","className","onClick","filterDropdownVisible","valueKeys","filters","prevProps","onFilterDropdownVisibleChange","some","item","children","propSelectedKeys","map","filter","undefined","items","dropdownPrefixCls","containSelected","Object","keys","value","subMenuCls","text","toString","renderMenus","renderMenuItem","multiple","filterMultiple","internalSelectedKeys","input","originSelectedKeys","getPopupContainer","dropdownMenuClass","hasSubMenu","confirm","clearFilters","menus","val","filterConfirm","filterReset","nextProps","prevState","newState","Component","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport shallowequal from 'shallowequal';\nimport Dropdown from '../dropdown';\nimport Icon from '../icon';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\nimport { generateValueMaps } from './util';\nfunction stopPropagation(e) {\n    e.stopPropagation();\n    if (e.nativeEvent.stopImmediatePropagation) {\n        e.nativeEvent.stopImmediatePropagation();\n    }\n}\nclass FilterMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setNeverShown = (column) => {\n            const rootNode = ReactDOM.findDOMNode(this);\n            const filterBelongToScrollBody = !!closest(rootNode, `.ant-table-scroll`);\n            if (filterBelongToScrollBody) {\n                // When fixed column have filters, there will be two dropdown menus\n                // Filter dropdown menu inside scroll body should never be shown\n                // To fix https://github.com/ant-design/ant-design/issues/5010 and\n                // https://github.com/ant-design/ant-design/issues/7909\n                this.neverShown = !!column.fixed;\n            }\n        };\n        this.setSelectedKeys = ({ selectedKeys }) => {\n            this.setState({ selectedKeys: selectedKeys });\n        };\n        this.handleClearFilters = () => {\n            this.setState({\n                selectedKeys: [],\n            }, this.handleConfirm);\n        };\n        this.handleConfirm = () => {\n            this.setVisible(false);\n            // Call `setSelectedKeys` & `confirm` in the same time will make filter data not up to date\n            // https://github.com/ant-design/ant-design/issues/12284\n            this.setState({}, this.confirmFilter);\n        };\n        this.onVisibleChange = (visible) => {\n            this.setVisible(visible);\n            const { column } = this.props;\n            // https://github.com/ant-design/ant-design/issues/17833\n            if (!visible && !(column.filterDropdown instanceof Function)) {\n                this.confirmFilter();\n            }\n        };\n        this.handleMenuItemClick = (info) => {\n            const { selectedKeys } = this.state;\n            if (!info.keyPath || info.keyPath.length <= 1) {\n                return;\n            }\n            const { keyPathOfSelectedItem } = this.state;\n            if (selectedKeys && selectedKeys.indexOf(info.key) >= 0) {\n                // deselect SubMenu child\n                delete keyPathOfSelectedItem[info.key];\n            }\n            else {\n                // select SubMenu child\n                keyPathOfSelectedItem[info.key] = info.keyPath;\n            }\n            this.setState({ keyPathOfSelectedItem });\n        };\n        this.renderFilterIcon = () => {\n            const { column, locale, prefixCls, selectedKeys } = this.props;\n            const filtered = selectedKeys && selectedKeys.length > 0;\n            let filterIcon = column.filterIcon;\n            if (typeof filterIcon === 'function') {\n                filterIcon = filterIcon(filtered);\n            }\n            const dropdownIconClass = classNames({\n                [`${prefixCls}-selected`]: filtered,\n                [`${prefixCls}-open`]: this.getDropdownVisible(),\n            });\n            if (!filterIcon) {\n                return (<Icon title={locale.filterTitle} type=\"filter\" theme=\"filled\" className={dropdownIconClass} onClick={stopPropagation}/>);\n            }\n            if (React.isValidElement(filterIcon)) {\n                return React.cloneElement(filterIcon, {\n                    title: filterIcon.props.title || locale.filterTitle,\n                    className: classNames(`${prefixCls}-icon`, dropdownIconClass, filterIcon.props.className),\n                    onClick: stopPropagation,\n                });\n            }\n            return <span className={classNames(`${prefixCls}-icon`, dropdownIconClass)}>{filterIcon}</span>;\n        };\n        const visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n        this.state = {\n            selectedKeys: props.selectedKeys,\n            valueKeys: generateValueMaps(props.column.filters),\n            keyPathOfSelectedItem: {},\n            visible,\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { column } = nextProps;\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        /**\n         * if the state is visible the component should ignore updates on selectedKeys prop to avoid\n         * that the user selection is lost\n         * this happens frequently when a table is connected on some sort of realtime data\n         * Fixes https://github.com/ant-design/ant-design/issues/10289 and\n         * https://github.com/ant-design/ant-design/issues/10209\n         */\n        if ('selectedKeys' in nextProps &&\n            !shallowequal(prevProps.selectedKeys, nextProps.selectedKeys)) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        if (!shallowequal((prevProps.column || {}).filters, (nextProps.column || {}).filters)) {\n            newState.valueKeys = generateValueMaps(nextProps.column.filters);\n        }\n        if ('filterDropdownVisible' in column) {\n            newState.visible = column.filterDropdownVisible;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    componentDidUpdate() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    getDropdownVisible() {\n        return this.neverShown ? false : this.state.visible;\n    }\n    setVisible(visible) {\n        const { column } = this.props;\n        if (!('filterDropdownVisible' in column)) {\n            this.setState({ visible });\n        }\n        if (column.onFilterDropdownVisibleChange) {\n            column.onFilterDropdownVisibleChange(visible);\n        }\n    }\n    hasSubMenu() {\n        const { column: { filters = [] }, } = this.props;\n        return filters.some(item => !!(item.children && item.children.length > 0));\n    }\n    confirmFilter() {\n        const { column, selectedKeys: propSelectedKeys, confirmFilter } = this.props;\n        const { selectedKeys, valueKeys } = this.state;\n        const { filterDropdown } = column;\n        if (!shallowequal(selectedKeys, propSelectedKeys)) {\n            confirmFilter(column, filterDropdown\n                ? selectedKeys\n                : selectedKeys.map(key => valueKeys[key]).filter(key => key !== undefined));\n        }\n    }\n    renderMenus(items) {\n        const { dropdownPrefixCls, prefixCls } = this.props;\n        return items.map(item => {\n            if (item.children && item.children.length > 0) {\n                const { keyPathOfSelectedItem } = this.state;\n                const containSelected = Object.keys(keyPathOfSelectedItem).some(key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0);\n                const subMenuCls = classNames(`${prefixCls}-dropdown-submenu`, {\n                    [`${dropdownPrefixCls}-submenu-contain-selected`]: containSelected,\n                });\n                return (<SubMenu title={item.text} popupClassName={subMenuCls} key={item.value.toString()}>\n            {this.renderMenus(item.children)}\n          </SubMenu>);\n            }\n            return this.renderMenuItem(item);\n        });\n    }\n    renderMenuItem(item) {\n        const { column } = this.props;\n        const { selectedKeys } = this.state;\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        // We still need trade key as string since Menu render need string\n        const internalSelectedKeys = (selectedKeys || []).map(key => key.toString());\n        const input = multiple ? (<Checkbox checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>) : (<Radio checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>);\n        return (<MenuItem key={item.value}>\n        {input}\n        <span>{item.text}</span>\n      </MenuItem>);\n    }\n    render() {\n        const { selectedKeys: originSelectedKeys } = this.state;\n        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;\n        // default multiple selection in filter dropdown\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        const dropdownMenuClass = classNames({\n            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu(),\n        });\n        let { filterDropdown } = column;\n        if (filterDropdown instanceof Function) {\n            filterDropdown = filterDropdown({\n                prefixCls: `${dropdownPrefixCls}-custom`,\n                setSelectedKeys: (selectedKeys) => this.setSelectedKeys({ selectedKeys }),\n                selectedKeys: originSelectedKeys,\n                confirm: this.handleConfirm,\n                clearFilters: this.handleClearFilters,\n                filters: column.filters,\n                visible: this.getDropdownVisible(),\n            });\n        }\n        const menus = filterDropdown ? (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        {filterDropdown}\n      </FilterDropdownMenuWrapper>) : (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        <Menu multiple={multiple} onClick={this.handleMenuItemClick} prefixCls={`${dropdownPrefixCls}-menu`} className={dropdownMenuClass} onSelect={this.setSelectedKeys} onDeselect={this.setSelectedKeys} selectedKeys={originSelectedKeys && originSelectedKeys.map(val => val.toString())} getPopupContainer={getPopupContainer}>\n          {this.renderMenus(column.filters)}\n        </Menu>\n        <div className={`${prefixCls}-dropdown-btns`}>\n          <a className={`${prefixCls}-dropdown-link confirm`} onClick={this.handleConfirm}>\n            {locale.filterConfirm}\n          </a>\n          <a className={`${prefixCls}-dropdown-link clear`} onClick={this.handleClearFilters}>\n            {locale.filterReset}\n          </a>\n        </div>\n      </FilterDropdownMenuWrapper>);\n        return (<Dropdown trigger={['click']} placement=\"bottomRight\" overlay={menus} visible={this.getDropdownVisible()} onVisibleChange={this.onVisibleChange} getPopupContainer={getPopupContainer} forceRender>\n        {this.renderFilterIcon()}\n      </Dropdown>);\n    }\n}\nFilterMenu.defaultProps = {\n    column: {},\n};\npolyfill(FilterMenu);\nexport default FilterMenu;\n"],"file":"filterDropdown.js"}