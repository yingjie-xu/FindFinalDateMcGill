{"version":3,"sources":["typography/util.jsx"],"names":["ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","ellipsisContainer","wrapperStyle","padding","margin","display","lineHeight","pxToNumber","value","match","Number","styleToString","style","styleNames","Array","prototype","slice","apply","map","name","getPropertyValue","join","mergeChildren","children","childList","forEach","child","prevChild","length","push","originEle","rows","content","fixedContent","ellipsisStr","document","createElement","setAttribute","body","appendChild","originStyle","window","getComputedStyle","originCSS","maxHeight","paddingTop","paddingBottom","position","left","height","minHeight","top","zIndex","textOverflow","whiteSpace","webkitLineClamp","contentList","inRange","offsetHeight","text","innerHTML","ellipsis","childNodes","cloneNode","filter","nodeType","fixedNodes","ellipsisChildren","ellipsisContentHolder","ellipsisTextNode","createTextNode","childNode","appendChildNode","node","insertBefore","measureText","textNode","fullText","startLoc","endLoc","lastSuccessLoc","midLoc","Math","floor","currentText","textContent","step","currentStepText","finished","reactNode","measureNode","index","type","removeChild","some"],"mappings":"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","sourcesContent":["import { render, unmountComponentAtNode } from 'react-dom';\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\n// We only handle element & text node.\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n    padding: 0,\n    margin: 0,\n    display: 'inline',\n    lineHeight: 'inherit',\n};\nfunction pxToNumber(value) {\n    if (!value)\n        return 0;\n    const match = value.match(/^\\d*(\\.\\d*)?/);\n    return match ? Number(match[0]) : 0;\n}\nfunction styleToString(style) {\n    // There are some different behavior between Firefox & Chrome.\n    // We have to handle this ourself.\n    const styleNames = Array.prototype.slice.apply(style);\n    return styleNames.map(name => `${name}: ${style.getPropertyValue(name)};`).join('');\n}\nfunction mergeChildren(children) {\n    const childList = [];\n    children.forEach((child) => {\n        const prevChild = childList[childList.length - 1];\n        if (typeof child === 'string' && typeof prevChild === 'string') {\n            childList[childList.length - 1] += child;\n        }\n        else {\n            childList.push(child);\n        }\n    });\n    return childList;\n}\nexport default (originEle, rows, content, fixedContent, ellipsisStr) => {\n    if (!ellipsisContainer) {\n        ellipsisContainer = document.createElement('div');\n        ellipsisContainer.setAttribute('aria-hidden', 'true');\n        document.body.appendChild(ellipsisContainer);\n    }\n    // Get origin style\n    const originStyle = window.getComputedStyle(originEle);\n    const originCSS = styleToString(originStyle);\n    const lineHeight = pxToNumber(originStyle.lineHeight);\n    const maxHeight = lineHeight * (rows + 1) +\n        pxToNumber(originStyle.paddingTop) +\n        pxToNumber(originStyle.paddingBottom);\n    // Set shadow\n    ellipsisContainer.setAttribute('style', originCSS);\n    ellipsisContainer.style.position = 'fixed';\n    ellipsisContainer.style.left = '0';\n    ellipsisContainer.style.height = 'auto';\n    ellipsisContainer.style.minHeight = 'auto';\n    ellipsisContainer.style.maxHeight = 'auto';\n    ellipsisContainer.style.top = '-999999px';\n    ellipsisContainer.style.zIndex = '-1000';\n    // clean up css overflow\n    ellipsisContainer.style.textOverflow = 'clip';\n    ellipsisContainer.style.whiteSpace = 'normal';\n    ellipsisContainer.style.webkitLineClamp = 'none';\n    // Render in the fake container\n    const contentList = mergeChildren(toArray(content));\n    render(<div style={wrapperStyle}>\n      <span style={wrapperStyle}>{contentList}</span>\n      <span style={wrapperStyle}>{fixedContent}</span>\n    </div>, ellipsisContainer); // wrap in an div for old version react\n    // Check if ellipsis in measure div is height enough for content\n    function inRange() {\n        return ellipsisContainer.offsetHeight < maxHeight;\n    }\n    // Skip ellipsis if already match\n    if (inRange()) {\n        unmountComponentAtNode(ellipsisContainer);\n        return { content, text: ellipsisContainer.innerHTML, ellipsis: false };\n    }\n    // We should clone the childNode since they're controlled by React and we can't reuse it without warning\n    const childNodes = Array.prototype.slice\n        .apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes)\n        .filter(({ nodeType }) => nodeType !== COMMENT_NODE);\n    const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n    unmountComponentAtNode(ellipsisContainer);\n    // ========================= Find match ellipsis content =========================\n    const ellipsisChildren = [];\n    ellipsisContainer.innerHTML = '';\n    // Create origin content holder\n    const ellipsisContentHolder = document.createElement('span');\n    ellipsisContainer.appendChild(ellipsisContentHolder);\n    const ellipsisTextNode = document.createTextNode(ellipsisStr);\n    ellipsisContentHolder.appendChild(ellipsisTextNode);\n    fixedNodes.forEach(childNode => {\n        ellipsisContainer.appendChild(childNode);\n    });\n    // Append before fixed nodes\n    function appendChildNode(node) {\n        ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n    }\n    // Get maximum text\n    function measureText(textNode, fullText, startLoc = 0, endLoc = fullText.length, lastSuccessLoc = 0) {\n        const midLoc = Math.floor((startLoc + endLoc) / 2);\n        const currentText = fullText.slice(0, midLoc);\n        textNode.textContent = currentText;\n        if (startLoc >= endLoc - 1) {\n            // Loop when step is small\n            for (let step = endLoc; step >= startLoc; step -= 1) {\n                const currentStepText = fullText.slice(0, step);\n                textNode.textContent = currentStepText;\n                if (inRange()) {\n                    return step === fullText.length\n                        ? {\n                            finished: false,\n                            reactNode: fullText,\n                        }\n                        : {\n                            finished: true,\n                            reactNode: currentStepText,\n                        };\n                }\n            }\n        }\n        if (inRange()) {\n            return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n        }\n        return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n    }\n    function measureNode(childNode, index) {\n        const type = childNode.nodeType;\n        if (type === ELEMENT_NODE) {\n            // We don't split element, it will keep if whole element can be displayed.\n            appendChildNode(childNode);\n            if (inRange()) {\n                return {\n                    finished: false,\n                    reactNode: contentList[index],\n                };\n            }\n            // Clean up if can not pull in\n            ellipsisContentHolder.removeChild(childNode);\n            return {\n                finished: true,\n                reactNode: null,\n            };\n        }\n        if (type === TEXT_NODE) {\n            const fullText = childNode.textContent || '';\n            const textNode = document.createTextNode(fullText);\n            appendChildNode(textNode);\n            return measureText(textNode, fullText);\n        }\n        // Not handle other type of content\n        // PS: This code should not be attached after react 16\n        return {\n            finished: false,\n            reactNode: null,\n        };\n    }\n    childNodes.some((childNode, index) => {\n        const { finished, reactNode } = measureNode(childNode, index);\n        if (reactNode) {\n            ellipsisChildren.push(reactNode);\n        }\n        return finished;\n    });\n    return {\n        content: ellipsisChildren,\n        text: ellipsisContainer.innerHTML,\n        ellipsis: true,\n    };\n};\n"],"file":"util.js"}