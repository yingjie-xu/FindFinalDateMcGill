{"version":3,"sources":["tree/util.js"],"names":["getNodeChildren","convertTreeToEntities","Record","traverseNodesKey","rootChildren","callback","nodeList","processNode","node","key","children","props","forEach","getFullKeyList","keyEntities","Object","keys","calcRangeKeys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf","convertDirectoryKeysToNodes","restKeys","nodes","index","splice","length","getFullKeyListByTreeData","treeData","item"],"mappings":"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","sourcesContent":["import { getNodeChildren, convertTreeToEntities } from 'rc-tree/lib/util';\nvar Record;\n(function (Record) {\n    Record[Record[\"None\"] = 0] = \"None\";\n    Record[Record[\"Start\"] = 1] = \"Start\";\n    Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n// TODO: Move this logic into `rc-tree`\nfunction traverseNodesKey(rootChildren, callback) {\n    const nodeList = getNodeChildren(rootChildren) || [];\n    function processNode(node) {\n        const { key, props: { children }, } = node;\n        if (callback(key, node) !== false) {\n            traverseNodesKey(children, callback);\n        }\n    }\n    nodeList.forEach(processNode);\n}\nexport function getFullKeyList(children) {\n    const { keyEntities } = convertTreeToEntities(children);\n    return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n    const keys = [];\n    let record = Record.None;\n    if (startKey && startKey === endKey) {\n        return [startKey];\n    }\n    if (!startKey || !endKey) {\n        return [];\n    }\n    function matchKey(key) {\n        return key === startKey || key === endKey;\n    }\n    traverseNodesKey(rootChildren, (key) => {\n        if (record === Record.End) {\n            return false;\n        }\n        if (matchKey(key)) {\n            // Match test\n            keys.push(key);\n            if (record === Record.None) {\n                record = Record.Start;\n            }\n            else if (record === Record.Start) {\n                record = Record.End;\n                return false;\n            }\n        }\n        else if (record === Record.Start) {\n            // Append selection\n            keys.push(key);\n        }\n        if (expandedKeys.indexOf(key) === -1) {\n            return false;\n        }\n        return true;\n    });\n    return keys;\n}\nexport function convertDirectoryKeysToNodes(rootChildren, keys) {\n    const restKeys = [...keys];\n    const nodes = [];\n    traverseNodesKey(rootChildren, (key, node) => {\n        const index = restKeys.indexOf(key);\n        if (index !== -1) {\n            nodes.push(node);\n            restKeys.splice(index, 1);\n        }\n        return !!restKeys.length;\n    });\n    return nodes;\n}\nexport function getFullKeyListByTreeData(treeData) {\n    let keys = [];\n    (treeData || []).forEach(item => {\n        keys.push(item.key);\n        if (item.children) {\n            keys = [...keys, ...getFullKeyListByTreeData(item.children)];\n        }\n    });\n    return keys;\n}\n"],"file":"util.js"}