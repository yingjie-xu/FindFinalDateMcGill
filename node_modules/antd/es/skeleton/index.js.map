{"version":3,"sources":["skeleton/index.jsx"],"names":["React","classNames","Avatar","Title","Paragraph","ConfigConsumer","getComponentProps","prop","getAvatarBasicProps","hasTitle","hasParagraph","shape","getTitleBasicProps","hasAvatar","width","getParagraphBasicProps","basicProps","rows","Skeleton","arguments","renderSkeleton","getPrefixCls","props","customizePrefixCls","prefixCls","loading","className","children","avatar","title","paragraph","active","avatarNode","avatarProps","contentNode","$title","titleProps","paragraphNode","paragraphProps","cls","Component","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Avatar from './Avatar';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport { ConfigConsumer } from '../config-provider';\nfunction getComponentProps(prop) {\n    if (prop && typeof prop === 'object') {\n        return prop;\n    }\n    return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n    if (hasTitle && !hasParagraph) {\n        return { shape: 'square' };\n    }\n    return { shape: 'circle' };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n    if (!hasAvatar && hasParagraph) {\n        return { width: '38%' };\n    }\n    if (hasAvatar && hasParagraph) {\n        return { width: '50%' };\n    }\n    return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n    const basicProps = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n        basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n        basicProps.rows = 3;\n    }\n    else {\n        basicProps.rows = 2;\n    }\n    return basicProps;\n}\nclass Skeleton extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSkeleton = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, loading, className, children, avatar, title, paragraph, active, } = this.props;\n            const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n            if (loading || !('loading' in this.props)) {\n                const hasAvatar = !!avatar;\n                const hasTitle = !!title;\n                const hasParagraph = !!paragraph;\n                // Avatar\n                let avatarNode;\n                if (hasAvatar) {\n                    const avatarProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-avatar` }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n                    avatarNode = (<div className={`${prefixCls}-header`}>\n            <Avatar {...avatarProps}/>\n          </div>);\n                }\n                let contentNode;\n                if (hasTitle || hasParagraph) {\n                    // Title\n                    let $title;\n                    if (hasTitle) {\n                        const titleProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-title` }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n                        $title = <Title {...titleProps}/>;\n                    }\n                    // Paragraph\n                    let paragraphNode;\n                    if (hasParagraph) {\n                        const paragraphProps = Object.assign(Object.assign({ prefixCls: `${prefixCls}-paragraph` }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n                        paragraphNode = <Paragraph {...paragraphProps}/>;\n                    }\n                    contentNode = (<div className={`${prefixCls}-content`}>\n            {$title}\n            {paragraphNode}\n          </div>);\n                }\n                const cls = classNames(prefixCls, className, {\n                    [`${prefixCls}-with-avatar`]: hasAvatar,\n                    [`${prefixCls}-active`]: active,\n                });\n                return (<div className={cls}>\n          {avatarNode}\n          {contentNode}\n        </div>);\n            }\n            return children;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSkeleton}</ConfigConsumer>;\n    }\n}\nSkeleton.defaultProps = {\n    avatar: false,\n    title: true,\n    paragraph: true,\n};\nexport default Skeleton;\n"],"file":"index.js"}