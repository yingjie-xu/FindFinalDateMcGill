{"version":3,"sources":["config-provider/index.jsx"],"names":["React","LocaleProvider","ANT_MARK","LocaleReceiver","ConfigConsumer","ConfigContext","configConsumerProps","ConfigProvider","arguments","getPrefixCls","suffixCls","customizePrefixCls","props","prefixCls","renderProvider","context","legacyLocale","children","getPopupContainer","renderEmpty","csp","autoInsertSpaceInButton","locale","pageHeader","config","_","__","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,IAAyBC,QAAzB,QAAyC,oBAAzC;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,WAA9C;AACA,SAASD,cAAT;AACA,OAAO,IAAME,mBAAmB,GAAG,CAC/B,mBAD+B,EAE/B,eAF+B,EAG/B,cAH+B,EAI/B,aAJ+B,EAK/B,KAL+B,EAM/B,yBAN+B,EAO/B,QAP+B,EAQ/B,YAR+B,CAA5B;;IAUDC,c;;;;;AACF,4BAAc;AAAA;;AAAA;;AACV,yFAASC,SAAT;;AACA,UAAKC,YAAL,GAAoB,UAACC,SAAD,EAAYC,kBAAZ,EAAmC;AAAA,kCACrB,MAAKC,KADgB,CAC3CC,SAD2C;AAAA,UAC3CA,SAD2C,sCAC/B,KAD+B;AAEnD,UAAIF,kBAAJ,EACI,OAAOA,kBAAP;AACJ,aAAOD,SAAS,aAAMG,SAAN,cAAmBH,SAAnB,IAAiCG,SAAjD;AACH,KALD;;AAMA,UAAKC,cAAL,GAAsB,UAACC,OAAD,EAAUC,YAAV,EAA2B;AAAA,wBAC2D,MAAKJ,KADhE;AAAA,UACrCK,QADqC,eACrCA,QADqC;AAAA,UAC3BC,iBAD2B,eAC3BA,iBAD2B;AAAA,UACRC,WADQ,eACRA,WADQ;AAAA,UACKC,GADL,eACKA,GADL;AAAA,UACUC,uBADV,eACUA,uBADV;AAAA,UACmCC,MADnC,eACmCA,MADnC;AAAA,UAC2CC,UAD3C,eAC2CA,UAD3C;;AAE7C,UAAMC,MAAM,GAAG,SAAc,SAAc,EAAd,EAAkBT,OAAlB,CAAd,EAA0C;AAAEN,QAAAA,YAAY,EAAE,MAAKA,YAArB;AAAmCW,QAAAA,GAAG,EAAHA,GAAnC;AACrDC,QAAAA,uBAAuB,EAAvBA;AADqD,OAA1C,CAAf;;AAEA,UAAIH,iBAAJ,EAAuB;AACnBM,QAAAA,MAAM,CAACN,iBAAP,GAA2BA,iBAA3B;AACH;;AACD,UAAIC,WAAJ,EAAiB;AACbK,QAAAA,MAAM,CAACL,WAAP,GAAqBA,WAArB;AACH;;AACD,UAAII,UAAJ,EAAgB;AACZC,QAAAA,MAAM,CAACD,UAAP,GAAoBA,UAApB;AACH;;AACD,aAAQ,oBAAC,aAAD,CAAe,QAAf;AAAwB,QAAA,KAAK,EAAEC;AAA/B,SACZ,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAEF,MAAM,IAAIN,YAAlC;AAAgD,QAAA,WAAW,EAAEd;AAA7D,SACGe,QADH,CADY,CAAR;AAKH,KAlBD;;AARU;AA2Bb;;;;6BACQ;AAAA;;AACL,aAAQ,oBAAC,cAAD,QACP,UAACQ,CAAD,EAAIC,EAAJ,EAAQV,YAAR;AAAA,eAA0B,oBAAC,cAAD,QACtB,UAAAD,OAAO;AAAA,iBAAI,MAAI,CAACD,cAAL,CAAoBC,OAApB,EAA6BC,YAA7B,CAAJ;AAAA,SADe,CAA1B;AAAA,OADO,CAAR;AAKH;;;;EAnCwBhB,KAAK,CAAC2B,S;;AAqCnC,eAAepB,cAAf","sourcesContent":["// TODO: remove this lint\n// SFC has specified a displayName, but not worked.\n/* eslint-disable react/display-name */\nimport * as React from 'react';\nimport LocaleProvider, { ANT_MARK } from '../locale-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport { ConfigConsumer, ConfigContext } from './context';\nexport { ConfigConsumer };\nexport const configConsumerProps = [\n    'getPopupContainer',\n    'rootPrefixCls',\n    'getPrefixCls',\n    'renderEmpty',\n    'csp',\n    'autoInsertSpaceInButton',\n    'locale',\n    'pageHeader',\n];\nclass ConfigProvider extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getPrefixCls = (suffixCls, customizePrefixCls) => {\n            const { prefixCls = 'ant' } = this.props;\n            if (customizePrefixCls)\n                return customizePrefixCls;\n            return suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;\n        };\n        this.renderProvider = (context, legacyLocale) => {\n            const { children, getPopupContainer, renderEmpty, csp, autoInsertSpaceInButton, locale, pageHeader, } = this.props;\n            const config = Object.assign(Object.assign({}, context), { getPrefixCls: this.getPrefixCls, csp,\n                autoInsertSpaceInButton });\n            if (getPopupContainer) {\n                config.getPopupContainer = getPopupContainer;\n            }\n            if (renderEmpty) {\n                config.renderEmpty = renderEmpty;\n            }\n            if (pageHeader) {\n                config.pageHeader = pageHeader;\n            }\n            return (<ConfigContext.Provider value={config}>\n        <LocaleProvider locale={locale || legacyLocale} _ANT_MARK__={ANT_MARK}>\n          {children}\n        </LocaleProvider>\n      </ConfigContext.Provider>);\n        };\n    }\n    render() {\n        return (<LocaleReceiver>\n        {(_, __, legacyLocale) => (<ConfigConsumer>\n            {context => this.renderProvider(context, legacyLocale)}\n          </ConfigConsumer>)}\n      </LocaleReceiver>);\n    }\n}\nexport default ConfigProvider;\n"],"file":"index.js"}