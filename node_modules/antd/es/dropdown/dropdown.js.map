{"version":3,"sources":["dropdown/dropdown.jsx"],"names":["React","RcDropdown","classNames","ConfigConsumer","warning","Icon","tuple","Placements","Dropdown","arguments","renderOverlay","prefixCls","overlay","props","overlayNode","Children","only","overlayProps","mode","selectable","focusable","expandIcon","fixedModeOverlay","type","cloneElement","renderDropDown","getContextPopupContainer","getPopupContainer","getPrefixCls","customizePrefixCls","children","trigger","disabled","child","dropdownTrigger","className","triggerActions","alignPoint","indexOf","getTransitionName","placement","transitionName","undefined","Component","defaultProps","mouseEnterDelay","mouseLeaveDelay"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcDropdown from 'rc-dropdown';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nconst Placements = tuple('topLeft', 'topCenter', 'topRight', 'bottomLeft', 'bottomCenter', 'bottomRight');\nexport default class Dropdown extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderOverlay = (prefixCls) => {\n            // rc-dropdown already can process the function of overlay, but we have check logic here.\n            // So we need render the element to check and pass back to rc-dropdown.\n            const { overlay } = this.props;\n            let overlayNode;\n            if (typeof overlay === 'function') {\n                overlayNode = overlay();\n            }\n            else {\n                overlayNode = overlay;\n            }\n            overlayNode = React.Children.only(overlayNode);\n            const overlayProps = overlayNode.props;\n            // Warning if use other mode\n            warning(!overlayProps.mode || overlayProps.mode === 'vertical', 'Dropdown', `mode=\"${overlayProps.mode}\" is not supported for Dropdown's Menu.`);\n            // menu cannot be selectable in dropdown defaultly\n            // menu should be focusable in dropdown defaultly\n            const { selectable = false, focusable = true } = overlayProps;\n            const expandIcon = (<span className={`${prefixCls}-menu-submenu-arrow`}>\n        <Icon type=\"right\" className={`${prefixCls}-menu-submenu-arrow-icon`}/>\n      </span>);\n            const fixedModeOverlay = typeof overlayNode.type === 'string'\n                ? overlay\n                : React.cloneElement(overlayNode, {\n                    mode: 'vertical',\n                    selectable,\n                    focusable,\n                    expandIcon,\n                });\n            return fixedModeOverlay;\n        };\n        this.renderDropDown = ({ getPopupContainer: getContextPopupContainer, getPrefixCls, }) => {\n            const { prefixCls: customizePrefixCls, children, trigger, disabled, getPopupContainer, } = this.props;\n            const prefixCls = getPrefixCls('dropdown', customizePrefixCls);\n            const child = React.Children.only(children);\n            const dropdownTrigger = React.cloneElement(child, {\n                className: classNames(child.props.className, `${prefixCls}-trigger`),\n                disabled,\n            });\n            const triggerActions = disabled ? [] : trigger;\n            let alignPoint;\n            if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {\n                alignPoint = true;\n            }\n            return (<RcDropdown alignPoint={alignPoint} {...this.props} prefixCls={prefixCls} getPopupContainer={getPopupContainer || getContextPopupContainer} transitionName={this.getTransitionName()} trigger={triggerActions} overlay={() => this.renderOverlay(prefixCls)}>\n        {dropdownTrigger}\n      </RcDropdown>);\n        };\n    }\n    getTransitionName() {\n        const { placement = '', transitionName } = this.props;\n        if (transitionName !== undefined) {\n            return transitionName;\n        }\n        if (placement.indexOf('top') >= 0) {\n            return 'slide-down';\n        }\n        return 'slide-up';\n    }\n    render() {\n        return <ConfigConsumer>{this.renderDropDown}</ConfigConsumer>;\n    }\n}\nDropdown.defaultProps = {\n    mouseEnterDelay: 0.15,\n    mouseLeaveDelay: 0.1,\n    placement: 'bottomLeft',\n};\n"],"file":"dropdown.js"}