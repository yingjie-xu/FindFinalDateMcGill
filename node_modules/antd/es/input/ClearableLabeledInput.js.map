{"version":3,"sources":["input/ClearableLabeledInput.jsx"],"names":["React","polyfill","classNames","Icon","tuple","getInputClassName","ClearableInputType","hasPrefixSuffix","props","prefix","suffix","allowClear","ClearableLabeledInput","prefixCls","value","disabled","inputType","handleReset","undefined","className","renderClearIcon","element","renderSuffix","cloneElement","affixWrapperCls","size","style","labeledElement","addonBefore","addonAfter","wrapperClassName","addonClassName","addonBeforeNode","addonAfterNode","mergedWrapperClassName","mergedGroupClassName","renderTextAreaWithClearIcon","renderInputWithLabel","renderLabeledIcon","renderClearableLabeledInput","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nconst ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n    return !!(props.prefix || props.suffix || props.allowClear);\n}\nclass ClearableLabeledInput extends React.Component {\n    renderClearIcon(prefixCls) {\n        const { allowClear, value, disabled, inputType, handleReset } = this.props;\n        if (!allowClear || disabled || value === undefined || value === null || value === '') {\n            return null;\n        }\n        const className = inputType === ClearableInputType[0]\n            ? `${prefixCls}-textarea-clear-icon`\n            : `${prefixCls}-clear-icon`;\n        return (<Icon type=\"close-circle\" theme=\"filled\" onClick={handleReset} className={className} role=\"button\"/>);\n    }\n    renderSuffix(prefixCls) {\n        const { suffix, allowClear } = this.props;\n        if (suffix || allowClear) {\n            return (<span className={`${prefixCls}-suffix`}>\n          {this.renderClearIcon(prefixCls)}\n          {suffix}\n        </span>);\n        }\n        return null;\n    }\n    renderLabeledIcon(prefixCls, element) {\n        const props = this.props;\n        const suffix = this.renderSuffix(prefixCls);\n        if (!hasPrefixSuffix(props)) {\n            return React.cloneElement(element, {\n                value: props.value,\n            });\n        }\n        const prefix = props.prefix ? (<span className={`${prefixCls}-prefix`}>{props.prefix}</span>) : null;\n        const affixWrapperCls = classNames(props.className, `${prefixCls}-affix-wrapper`, {\n            [`${prefixCls}-affix-wrapper-sm`]: props.size === 'small',\n            [`${prefixCls}-affix-wrapper-lg`]: props.size === 'large',\n            [`${prefixCls}-affix-wrapper-input-with-clear-btn`]: props.suffix && props.allowClear && this.props.value,\n        });\n        return (<span className={affixWrapperCls} style={props.style}>\n        {prefix}\n        {React.cloneElement(element, {\n            style: null,\n            value: props.value,\n            className: getInputClassName(prefixCls, props.size, props.disabled),\n        })}\n        {suffix}\n      </span>);\n    }\n    renderInputWithLabel(prefixCls, labeledElement) {\n        const { addonBefore, addonAfter, style, size, className } = this.props;\n        // Not wrap when there is not addons\n        if (!addonBefore && !addonAfter) {\n            return labeledElement;\n        }\n        const wrapperClassName = `${prefixCls}-group`;\n        const addonClassName = `${wrapperClassName}-addon`;\n        const addonBeforeNode = addonBefore ? (<span className={addonClassName}>{addonBefore}</span>) : null;\n        const addonAfterNode = addonAfter ? <span className={addonClassName}>{addonAfter}</span> : null;\n        const mergedWrapperClassName = classNames(`${prefixCls}-wrapper`, {\n            [wrapperClassName]: addonBefore || addonAfter,\n        });\n        const mergedGroupClassName = classNames(className, `${prefixCls}-group-wrapper`, {\n            [`${prefixCls}-group-wrapper-sm`]: size === 'small',\n            [`${prefixCls}-group-wrapper-lg`]: size === 'large',\n        });\n        // Need another wrapper for changing display:table to display:inline-block\n        // and put style prop in wrapper\n        return (<span className={mergedGroupClassName} style={style}>\n        <span className={mergedWrapperClassName}>\n          {addonBeforeNode}\n          {React.cloneElement(labeledElement, { style: null })}\n          {addonAfterNode}\n        </span>\n      </span>);\n    }\n    renderTextAreaWithClearIcon(prefixCls, element) {\n        const { value, allowClear, className, style } = this.props;\n        if (!allowClear) {\n            return React.cloneElement(element, {\n                value,\n            });\n        }\n        const affixWrapperCls = classNames(className, `${prefixCls}-affix-wrapper`, `${prefixCls}-affix-wrapper-textarea-with-clear-btn`);\n        return (<span className={affixWrapperCls} style={style}>\n        {React.cloneElement(element, {\n            style: null,\n            value,\n        })}\n        {this.renderClearIcon(prefixCls)}\n      </span>);\n    }\n    renderClearableLabeledInput() {\n        const { prefixCls, inputType, element } = this.props;\n        if (inputType === ClearableInputType[0]) {\n            return this.renderTextAreaWithClearIcon(prefixCls, element);\n        }\n        return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n    render() {\n        return this.renderClearableLabeledInput();\n    }\n}\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;\n"],"file":"ClearableLabeledInput.js"}