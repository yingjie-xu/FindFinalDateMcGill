{"version":3,"sources":["progress/progress.jsx"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","PropTypes","React","classNames","omit","Icon","ConfigConsumer","tuple","Line","Circle","validProgress","ProgressTypes","ProgressStatuses","Progress","arguments","renderProgress","getPrefixCls","props","customizePrefixCls","prefixCls","className","size","type","showInfo","restProps","progressStatus","getProgressStatus","progressInfo","renderProcessInfo","progress","classString","successPercent","percent","parseInt","undefined","toString","status","getPercentNumber","format","text","textFormatter","percentNumber","iconType","Component","defaultProps","trailColor","gapDegree","strokeLinecap","propTypes","oneOf","bool","number","width","strokeWidth","strokeColor","oneOfType","string","object","func"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport { tuple } from '../_util/type';\nimport Line from './Line';\nimport Circle from './Circle';\nimport { validProgress } from './utils';\nconst ProgressTypes = tuple('line', 'circle', 'dashboard');\nconst ProgressStatuses = tuple('normal', 'exception', 'active', 'success');\nexport default class Progress extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderProgress = ({ getPrefixCls }) => {\n            const { props } = this;\n            const { prefixCls: customizePrefixCls, className, size, type, showInfo } = props, restProps = __rest(props, [\"prefixCls\", \"className\", \"size\", \"type\", \"showInfo\"]);\n            const prefixCls = getPrefixCls('progress', customizePrefixCls);\n            const progressStatus = this.getProgressStatus();\n            const progressInfo = this.renderProcessInfo(prefixCls, progressStatus);\n            let progress;\n            // Render progress shape\n            if (type === 'line') {\n                progress = (<Line {...this.props} prefixCls={prefixCls}>\n          {progressInfo}\n        </Line>);\n            }\n            else if (type === 'circle' || type === 'dashboard') {\n                progress = (<Circle {...this.props} prefixCls={prefixCls} progressStatus={progressStatus}>\n          {progressInfo}\n        </Circle>);\n            }\n            const classString = classNames(prefixCls, {\n                [`${prefixCls}-${(type === 'dashboard' && 'circle') || type}`]: true,\n                [`${prefixCls}-status-${progressStatus}`]: true,\n                [`${prefixCls}-show-info`]: showInfo,\n                [`${prefixCls}-${size}`]: size,\n            }, className);\n            return (<div {...omit(restProps, [\n                'status',\n                'format',\n                'trailColor',\n                'successPercent',\n                'strokeWidth',\n                'width',\n                'gapDegree',\n                'gapPosition',\n                'strokeColor',\n                'strokeLinecap',\n                'percent',\n            ])} className={classString}>\n        {progress}\n      </div>);\n        };\n    }\n    getPercentNumber() {\n        const { successPercent, percent = 0 } = this.props;\n        return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);\n    }\n    getProgressStatus() {\n        const { status } = this.props;\n        if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {\n            return 'success';\n        }\n        return status || 'normal';\n    }\n    renderProcessInfo(prefixCls, progressStatus) {\n        const { showInfo, format, type, percent, successPercent } = this.props;\n        if (!showInfo)\n            return null;\n        let text;\n        const textFormatter = format || (percentNumber => `${percentNumber}%`);\n        const iconType = type === 'circle' || type === 'dashboard' ? '' : '-circle';\n        if (format || (progressStatus !== 'exception' && progressStatus !== 'success')) {\n            text = textFormatter(validProgress(percent), validProgress(successPercent));\n        }\n        else if (progressStatus === 'exception') {\n            text = <Icon type={`close${iconType}`} theme={type === 'line' ? 'filled' : 'outlined'}/>;\n        }\n        else if (progressStatus === 'success') {\n            text = <Icon type={`check${iconType}`} theme={type === 'line' ? 'filled' : 'outlined'}/>;\n        }\n        return (<span className={`${prefixCls}-text`} title={typeof text === 'string' ? text : undefined}>\n        {text}\n      </span>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderProgress}</ConfigConsumer>;\n    }\n}\nProgress.defaultProps = {\n    type: 'line',\n    percent: 0,\n    showInfo: true,\n    trailColor: '#f3f3f3',\n    size: 'default',\n    gapDegree: 0,\n    strokeLinecap: 'round',\n};\nProgress.propTypes = {\n    status: PropTypes.oneOf(ProgressStatuses),\n    type: PropTypes.oneOf(ProgressTypes),\n    showInfo: PropTypes.bool,\n    percent: PropTypes.number,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    strokeLinecap: PropTypes.oneOf(['round', 'square']),\n    strokeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    trailColor: PropTypes.string,\n    format: PropTypes.func,\n    gapDegree: PropTypes.number,\n};\n"],"file":"progress.js"}