{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","course","id","undefined","handleChange","bind","document","title","event","k","this","setState","target","data","toUpperCase","isCourse","display","className","type","onChange","placeholder","style","width","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAiFeA,E,YA3Eb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,GACPC,QAAQ,EACRC,QAAIC,GAEN,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPR,E,iFAWZC,SAASC,MAAQ,0B,mCAGNC,GAEX,IAAK,IAAIC,KADTC,KAAKC,SAAS,CAACX,MAAOQ,EAAMI,OAAOZ,QACrBa,EAAK,iBAAkB,CACnC,GAAIA,EAAK,iBAAiBJ,KAAOD,EAAMI,OAAOZ,MAAMc,cAAe,CACjEJ,KAAKC,SAAS,CACZI,UAAU,EACVb,GAAIO,IAEN,MAEAC,KAAKC,SAAS,CAACI,UAAU,O,+BAM7B,IAAIC,OAAUb,EAgBd,OAfIO,KAAKX,MAAMgB,UACbC,EAAU,qBACVA,GAAWH,EAAK,iBAAiBH,KAAKX,MAAMG,IAC5Cc,GAAW,oBACXA,GAAWH,EAAK,aAAaH,KAAKX,MAAMG,IACxCc,GAAW,OACXA,GAAWH,EAAI,KAASH,KAAKX,MAAMG,IACnCc,GAAW,KACPH,EAAI,KAASH,KAAKX,MAAMG,MAC1Bc,GAAW,SACXA,GAAWH,EAAI,KAASH,KAAKX,MAAMG,MAGrCc,EAAU,4EAGV,yBAAKC,UAAU,OACb,2BACE,yBAAKA,UAAU,OACf,8BACE,6EACA,oDACwB,KACtB,uBACEC,KAAK,OACLlB,MAAOU,KAAKX,MAAMC,MAClBmB,SAAUT,KAAKN,aACfgB,YAAY,gBACZC,MAAO,CAAEC,MAAO,SAItB,4BAAKN,GACL,qCACS,uBAAGO,KAAK,gCAAR,SADT,oCAES,uBAAGA,KAAK,yCAAR,SAFT,oC,GAjEQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d430208b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport data from \"./new1.json\"\nimport { Input, Col, Row } from 'antd'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      value: \"\",\n      course: false,\n      id: undefined\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  \n  componentDidMount() {\n    document.title = \"Find Exam Date McGill\";\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value})\n    for (var k in data[\"COURSE NUMBER\"]) {\n      if (data[\"COURSE NUMBER\"][k] === event.target.value.toUpperCase()) {\n        this.setState({\n          isCourse: true,\n          id: k\n        })\n        break\n      } else {\n        this.setState({isCourse: false})\n      }\n    }\n  }\n\n  render() {\n    let display = undefined\n    if (this.state.isCourse) {\n      display = \"The Final Exam of \"\n      display += data[\"COURSE NUMBER\"][this.state.id]\n      display += \" will be held on \"\n      display += data[\"EXAM DATE\"][this.state.id]\n      display += \" at \"\n      display += data[\"TIME\"][this.state.id]\n      display += \". \"\n      if (data[\"NOTE\"][this.state.id]) {\n        display += \"Note: \"\n        display += data[\"NOTE\"][this.state.id]\n      }\n    } else {\n      display = \"Invalid course number! Please try again with the format \\\"XXXX(space)XXX\\\"!\"\n    }\n    return (\n      <div className=\"App\">\n        <Row>\n          <div className=\"bg\"></div>\n          <form>\n            <h1>Find your final exam date (McGill Univeristy)</h1>\n            <h2>\n              Enter Course Number: {\"\\t\"}\n              <Input \n                type=\"text\" \n                value={this.state.value} \n                onChange={this.handleChange}\n                placeholder='e.g. Math 240'\n                style={{ width: 200 }}\n              />\n            </h2>\n          </form>\n          <h2>{display}</h2>\n          <p>\n            Follow <a href=\"https://www.mcgill.ca/exams/\">this </a>link to get precise info. \n            Follow <a href=\"https://www.mcgill.ca/exams/buildings\">this </a>link to get exam location.\n          </p>\n        </Row>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}