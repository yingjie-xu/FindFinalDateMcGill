{"version":3,"sources":["Components/ExamCard.js","Components/Cards.js","Components/Input.js","App.js","serviceWorker.js","index.js"],"names":["ExamCard","course","this","props","lg","md","style","padding","title","bordered","Component","Cards","courses","course_list","data","filter","includes","console","log","length","map","key","id","arr","DynamicFieldSet","remove","k","form","keys","getFieldValue","setFieldsValue","add","nextKeys","concat","handleSubmit","e","preventDefault","validateFields","err","values","names","forEach","entry","push","replace","toUpperCase","getFieldDecorator","formItemLayout","wrapperCol","xs","span","sm","formItemLayoutWithOutLabel","offset","initialValue","formItems","index","Item","required","validateTrigger","rules","whitespace","message","placeholder","width","className","type","onClick","onSubmit","htmlType","WrappedDynamicFieldSet","create","name","App","href","target","rel","Input","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49a28000.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, Col} from \"antd\";\r\n// <Row gutter={[24, 24]}>\r\n//TODO: make card content prettier, add icons or grids\r\nclass ExamCard extends Component{\r\n    render(){\r\n    const {course} = this.props;\r\n        return(\r\n            <Col lg={12} md={24} style={{padding:'10px'}}>\r\n                <Card title={`${ course[\"COURSE NUMBER\"] }-${course[\"SECTION\"]} ${course[\"TITLE\"]}`} bordered={true}>\r\n                    {course[\"EXAM DATE\"]} {course[\"TIME\"]} \r\n                    {/* at {course[\"BUILDING\"]} {course[\"ROOM\"]} \r\n                    <br />\r\n                    Row {course[\"ROW\"]} From {course[\"FROM\"]} To {course[\"TO\"]} */}\r\n                </Card>\r\n            </Col>\r\n        )\r\n\r\n       \r\n    }\r\n}\r\n\r\nexport default ExamCard;\r\n","import React, { Component } from \"react\";\r\nimport data from \"../Assets/washed.json\";\r\nimport ExamCard from \"./ExamCard.js\";\r\n// import ExportToCalendar from \"../ExportToCalendar\";\r\n\r\nclass Cards extends Component{\r\n    render(){\r\n      const {courses} = this.props;\r\n      let course_list = [];\r\n      course_list = data.filter(course => {\r\n        return courses.includes(course['COURSE NUMBER']);\r\n      })\r\n      console.log(course_list)\r\n      return (\r\n        <div>\r\n          {course_list.length === 0 ? \r\n            <div>\r\n              <h2>Instructions: </h2>\r\n              <h3>\r\n                <p>Start by click the \"add course\" button\r\n                  <br/>Type in your courses (e.g. comp 202)\r\n                  <br/>Click the \"submit\" button\r\n                  <br/>View your final schedule\r\n                  <br/>Note: Invalid courses will be ignored\r\n                </p>\r\n              </h3>\r\n            </div> \r\n            : <div></div>\r\n          }\r\n          {course_list.map(course => <ExamCard course={course} key={course['COURSE NUMBER'] + course[\"SECTION\"] + course[\"ROW\"]}/>)}\r\n          {/* <ExportToCalendar exams={course_list}/> */}\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Cards;","import React, {Component} from 'react';\r\nimport Cards from './Cards';\r\nimport { Form, Input, Icon, Button, Row, Col } from 'antd';\r\nimport data from \"../Assets/washed.json\";\r\n\r\nlet id = 0;\r\nlet arr = [];\r\n\r\nclass DynamicFieldSet extends Component {\r\n  remove = k => {\r\n    const { form } = this.props;\r\n    // can use data-binding to get\r\n    const keys = form.getFieldValue('keys');\r\n    // We need at least one course\r\n    if (keys.length === 1) {\r\n      return;\r\n    }\r\n\r\n    // can use data-binding to set\r\n    form.setFieldsValue({\r\n      keys: keys.filter(key => key !== k),\r\n    });\r\n  };\r\n\r\n  add = () => {\r\n    const { form } = this.props;\r\n    // can use data-binding to get\r\n    const keys = form.getFieldValue('keys');\r\n    const nextKeys = keys.concat(id++);\r\n    // can use data-binding to set\r\n    // important! notify form to detect changes\r\n    form.setFieldsValue({\r\n      keys: nextKeys,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const { keys, names } = values;\r\n        console.log('Received values of form: ', values);\r\n        console.log('Merged values:', keys.map(key => names[key]));\r\n        let list = keys.map(key => names[key]);\r\n        \r\n        list.forEach(entry => {\r\n          // if entry exists\r\n          arr.push(entry.replace(/  +/g, ' ') //handle input with multiple space\r\n            .replace(/([A-z]{4})(\\d)/, '$1 $2') //handle input without space\r\n            .toUpperCase()); \r\n        });\r\n        console.log(arr)\r\n        let courses = data.map(e => e['COURSE NUMBER']);\r\n        arr = arr.filter(e => {\r\n          return courses.includes(e);\r\n        })\r\n        console.log(arr);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldValue } = this.props.form;\r\n    const formItemLayout = {\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 20 },\r\n      },\r\n    };\r\n    const formItemLayoutWithOutLabel = {\r\n      wrapperCol: {\r\n        xs: { span: 24, offset: 0 },\r\n        sm: { span: 20, offset: 0 },\r\n      },\r\n    };\r\n    getFieldDecorator('keys', { initialValue: [] });\r\n    const keys = getFieldValue('keys');\r\n    const formItems = keys.map((k, index) => (\r\n      <Form.Item\r\n        {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n        required={false}\r\n        key={k}\r\n      >\r\n        {getFieldDecorator(`names[${k}]`, {\r\n          validateTrigger: ['onChange', 'onBlur'],\r\n          rules: [\r\n            {\r\n              required: true,\r\n              whitespace: true,\r\n              message: \"Please input course's name or delete this field.\",\r\n            },\r\n          ],\r\n        })(<Input placeholder=\"course name\" style={{ width: '80%'}} />)}\r\n        {keys.length > 1 ? (\r\n          <Icon\r\n            className=\"dynamic-delete-button\"\r\n            type=\"minus-circle-o\"\r\n            onClick={() => this.remove(k)}\r\n          />\r\n        ) : null}\r\n      </Form.Item>\r\n    ));\r\n    return (\r\n      <Row>\r\n        <Col md={8} xs={24}>\r\n          <Form onSubmit={this.handleSubmit}>\r\n            {formItems}\r\n            <Form.Item {...formItemLayoutWithOutLabel}>\r\n              <Button type=\"dashed\" onClick={this.add} style={{ width: '80%' }}>\r\n                <Icon type=\"plus\" /> Add Course\r\n              </Button>\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayoutWithOutLabel}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n        <Col md={16} xs={24}>\r\n          <Cards courses = {arr} />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedDynamicFieldSet = Form.create({ name: 'dynamic_form_item' })(DynamicFieldSet);\r\n\r\nexport default WrappedDynamicFieldSet;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { Icon } from 'antd'\r\nimport Input from './Components/Input';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\"> \r\n        <h1>Final Exam Date Finder (McGill Univeristy)</h1>\r\n        <p>\r\n          <a href=\"https://www.mcgill.ca/exams/\" target='_blank' rel=\"noopener noreferrer\">precise info </a> |\r\n          <a href=\"https://www.mcgill.ca/exams/buildings\" target='_blank' rel=\"noopener noreferrer\"> exam location </a> |\r\n          <a href='https://github.com/yingjie-xu/FindFinalDateMcGill' target='_blank' rel=\"noopener noreferrer\"> <Icon type='github' /> </a>\r\n        </p>\r\n        <div id=\"input\">\r\n          <Input /> \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}