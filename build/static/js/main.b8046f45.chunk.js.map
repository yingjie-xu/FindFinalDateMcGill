{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","course","id","undefined","handleChange","bind","document","title","event","this","setState","target","query","replace","toUpperCase","k","data","isCourse","display","className","type","onChange","placeholder","style","width","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2gjGAuFeA,E,YAjFb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,GACPC,QAAQ,EACRC,QAAIC,GAEN,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPR,E,iFAWZC,SAASC,MAAQ,0B,mCAGNC,GACXC,KAAKC,SAAS,CAACV,MAAOQ,EAAMG,OAAOX,QACnC,IAAIY,EAAQJ,EAAMG,OAAOX,MACxBa,QAAQ,OAAQ,KAChBA,QAAQ,iBAAkB,SAC1BC,cAED,IAAK,IAAIC,KAAKC,EAAK,iBAAkB,CACnC,GAAIA,EAAK,iBAAiBD,KAAOH,EAAO,CACtCH,KAAKC,SAAS,CACZO,UAAU,EACVf,GAAIa,IAEN,MAEAN,KAAKC,SAAS,CAACO,UAAU,O,+BAM7B,IAAIC,OAAUf,EAgBd,OAfIM,KAAKV,MAAMkB,UACbC,EAAU,qBACVA,GAAWF,EAAK,iBAAiBP,KAAKV,MAAMG,IAC5CgB,GAAW,oBACXA,GAAWF,EAAK,aAAaP,KAAKV,MAAMG,IACxCgB,GAAW,OACXA,GAAWF,EAAI,KAASP,KAAKV,MAAMG,IACnCgB,GAAW,KACPF,EAAI,KAASP,KAAKV,MAAMG,MAC1BgB,GAAW,SACXA,GAAWF,EAAI,KAASP,KAAKV,MAAMG,MAGrCgB,EAAU,2CAGV,yBAAKC,UAAU,OACb,2BACE,yBAAKA,UAAU,OACf,8BACE,6EACA,oDACwB,KACtB,uBACEC,KAAK,OACLpB,MAAOS,KAAKV,MAAMC,MAClBqB,SAAUZ,KAAKL,aACfkB,YAAY,gBACZC,MAAO,CAAEC,MAAO,SAItB,4BAAKN,GACL,qCACS,uBAAGO,KAAK,+BAA+Bd,OAAO,SAASe,IAAI,uBAA3D,SADT,oCAES,uBAAGD,KAAK,wCAAwCd,OAAO,SAASe,IAAI,uBAApE,SAFT,kDAGsB,uBAAGD,KAAK,oDAAoDd,OAAO,SAASe,IAAI,uBAAsB,uBAAMN,KAAK,mB,GAzE/HO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8046f45.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport data from \"./new1.json\"\r\nimport { Input, Row, Icon } from 'antd'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      value: \"\",\r\n      course: false,\r\n      id: undefined\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  \r\n  componentDidMount() {\r\n    document.title = \"Find Exam Date McGill\";\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value})\r\n    let query = event.target.value\r\n    .replace(/  +/g, ' ') //handle input with multiple space\r\n    .replace(/([A-z]{4})(\\d)/, '$1 $2') //handle input without space\r\n    .toUpperCase(); \r\n\r\n    for (var k in data[\"COURSE NUMBER\"]) {\r\n      if (data[\"COURSE NUMBER\"][k] === query) {\r\n        this.setState({\r\n          isCourse: true,\r\n          id: k\r\n        })\r\n        break\r\n      } else {\r\n        this.setState({isCourse: false})\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let display = undefined\r\n    if (this.state.isCourse) {\r\n      display = \"The Final Exam of \"\r\n      display += data[\"COURSE NUMBER\"][this.state.id]\r\n      display += \" will be held on \"\r\n      display += data[\"EXAM DATE\"][this.state.id]\r\n      display += \" at \"\r\n      display += data[\"TIME\"][this.state.id]\r\n      display += \". \"\r\n      if (data[\"NOTE\"][this.state.id]) {\r\n        display += \"Note: \"\r\n        display += data[\"NOTE\"][this.state.id]\r\n      }\r\n    } else {\r\n      display = \"Invalid course number! Please try again!\"\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <Row>\r\n          <div className=\"bg\"></div>\r\n          <form>\r\n            <h1>Find your final exam date (McGill Univeristy)</h1>\r\n            <h2>\r\n              Enter Course Number: {\"\\t\"}\r\n              <Input \r\n                type=\"text\" \r\n                value={this.state.value} \r\n                onChange={this.handleChange}\r\n                placeholder='e.g. Math 240'\r\n                style={{ width: 200 }}\r\n              />\r\n            </h2>\r\n          </form>\r\n          <h2>{display}</h2>\r\n          <p>\r\n            Follow <a href=\"https://www.mcgill.ca/exams/\" target='_blank' rel=\"noopener noreferrer\">this </a>link to get precise info. \r\n            Follow <a href=\"https://www.mcgill.ca/exams/buildings\" target='_blank' rel=\"noopener noreferrer\">this </a>link to get exam location.\r\n            View the project on <a href='https://github.com/yingjie-xu/FindFinalDateMcGill' target='_blank' rel=\"noopener noreferrer\"><Icon type='github' /></a>\r\n          </p>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}